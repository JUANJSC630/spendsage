generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Transactions {
  id                                                  String       @id @default(uuid())
  userId                                              String
  amount                                              String
  description                                         String
  createdAt                                           DateTime     @default(now())
  updatedAt                                           DateTime     @updatedAt
  category                                            String
  date                                                DateTime
  fromAccountId                                       String?
  toAccountId                                         String?
  BankAccount_Transactions_fromAccountIdToBankAccount BankAccount? @relation("Transactions_fromAccountIdToBankAccount", fields: [fromAccountId], references: [id])
  BankAccount_Transactions_toAccountIdToBankAccount   BankAccount? @relation("Transactions_toAccountIdToBankAccount", fields: [toAccountId], references: [id])
}

model ListPaymentSchedule {
  id               String            @id @default(uuid())
  userId           String
  name             String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  paymentSchedules PaymentSchedule[]
}

model PaymentSchedule {
  id                    String              @id @default(uuid())
  userId                String
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  name                  String
  fromDate              DateTime
  toDate                DateTime
  listPaymentScheduleId String
  paymentItems          PaymentItem[]
  listPaymentSchedule   ListPaymentSchedule @relation(fields: [listPaymentScheduleId], references: [id], onDelete: Cascade)

  @@index([listPaymentScheduleId])
  @@index([userId])
}

model PaymentItem {
  id                String          @id @default(uuid())
  userId            String
  paymentScheduleId String
  check             Boolean
  amount            String
  date              DateTime
  description       String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  paymentSchedule   PaymentSchedule @relation(fields: [paymentScheduleId], references: [id], onDelete: Cascade)

  @@index([paymentScheduleId])
  @@index([userId])
}

model BankAccount {
  id                                                   String         @id
  userId                                               String
  name                                                 String
  balance                                              Float          @default(0)
  createdAt                                            DateTime       @default(now())
  updatedAt                                            DateTime
  Transactions_Transactions_fromAccountIdToBankAccount Transactions[] @relation("Transactions_fromAccountIdToBankAccount")
  Transactions_Transactions_toAccountIdToBankAccount   Transactions[] @relation("Transactions_toAccountIdToBankAccount")
}

model Budget {
  id        String   @id @default(uuid())
  userId    String
  category  String
  amount    String
  period    String
  month     Int
  year      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, category, month, year])
  @@index([userId])
  @@index([userId, category])
  @@index([userId, year, month])
}

model Category {
  id          String   @id @default(uuid())
  userId      String
  name        String
  slug        String
  description String?
  color       String   @default("#3B82F6")
  icon        String   @default("Folder")
  type        String   @default("expense")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, slug])
  @@index([userId])
  @@index([userId, slug])
  @@index([userId, type])
}
