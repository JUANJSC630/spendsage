generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Transactions {
  id                                                  String       @id @default(uuid())
  userId                                              String
  amount                                              String
  description                                         String
  createdAt                                           DateTime     @default(now())
  updatedAt                                           DateTime     @updatedAt
  category                                            String
  date                                                DateTime
  fromAccountId                                       String?
  toAccountId                                         String?
  BankAccount_Transactions_fromAccountIdToBankAccount BankAccount? @relation("Transactions_fromAccountIdToBankAccount", fields: [fromAccountId], references: [id])
  BankAccount_Transactions_toAccountIdToBankAccount   BankAccount? @relation("Transactions_toAccountIdToBankAccount", fields: [toAccountId], references: [id])
}

model ListPaymentSchedule {
  id               String            @id @default(uuid())
  userId           String            @db.Text
  paymentSchedules PaymentSchedule[]
  name             String            @db.Text
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model PaymentSchedule {
  id                    String               @id @default(uuid())
  userId                String               @db.Text
  listPaymentScheduleId String               @db.Text
  fromDate              DateTime
  toDate                DateTime
  name                  String               @db.Text
  paymentItems          PaymentItem[]
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  listPaymentSchedule   ListPaymentSchedule @relation(fields: [listPaymentScheduleId], references: [id], onDelete: Cascade)

  @@index([listPaymentScheduleId])
  @@index([userId])
}

model PaymentItem {
  id                String          @id @default(uuid())
  userId            String          @db.Text
  paymentScheduleId String          @db.Text
  check             Boolean
  amount            String          @db.Text
  date              DateTime
  description       String          @db.Text
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  paymentSchedule   PaymentSchedule @relation(fields: [paymentScheduleId], references: [id], onDelete: Cascade)

  @@index([paymentScheduleId])
  @@index([userId])
}

model BankAccount {
  id                                                   String         @id
  userId                                               String
  name                                                 String
  balance                                              Float          @default(0)
  createdAt                                            DateTime       @default(now())
  updatedAt                                            DateTime
  Transactions_Transactions_fromAccountIdToBankAccount Transactions[] @relation("Transactions_fromAccountIdToBankAccount")
  Transactions_Transactions_toAccountIdToBankAccount   Transactions[] @relation("Transactions_toAccountIdToBankAccount")
}

model Budget {
  id        String   @id @default(uuid())
  userId    String   @db.Text
  category  String   @db.Text
  amount    String   @db.Text
  period    String   @db.Text
  month     Int
  year      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([userId, category])
  @@index([userId, year, month])
  @@unique([userId, category, month, year])
}

model Category {
  id          String   @id @default(uuid())
  userId      String   @db.Text
  name        String   @db.Text
  slug        String   @db.Text
  description String?  @db.Text
  color       String   @default("#3B82F6") @db.Text
  icon        String   @default("Folder") @db.Text
  type        String   @default("expense") @db.Text
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([userId, slug])
  @@index([userId, type])
  @@unique([userId, slug])
}
